# Makefile for GKE ML Platform deployment and management
# Usage: make -f Makefile.gke <target>

# Configuration
PROJECT_ID ?= $(shell gcloud config get-value project 2>/dev/null)
CLUSTER_NAME ?= ml-platform-cluster
REGION ?= us-central1
ZONE ?= us-central1-c

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# Default target
.PHONY: help
help: ## Show this help message
	@echo "GKE ML Platform Management"
	@echo "========================="
	@echo ""
	@echo "Prerequisites:"
	@echo "  export PROJECT_ID=your-gcp-project-id"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Infrastructure targets
.PHONY: check-env
check-env: ## Check required environment variables
	@if [ -z "$(PROJECT_ID)" ]; then \
		echo "$(RED)ERROR: PROJECT_ID is not set$(NC)"; \
		echo "Please run: export PROJECT_ID=your-gcp-project-id"; \
		exit 1; \
	fi
	@echo "$(GREEN)✓ PROJECT_ID: $(PROJECT_ID)$(NC)"
	@echo "$(GREEN)✓ CLUSTER_NAME: $(CLUSTER_NAME)$(NC)"
	@echo "$(GREEN)✓ REGION: $(REGION)$(NC)"

.PHONY: deploy-infrastructure
deploy-infrastructure: check-env ## Deploy GKE infrastructure using Terraform
	@echo "$(YELLOW)Deploying GKE infrastructure...$(NC)"
	cd terraform && terraform init
	cd terraform && terraform plan -var="project_id=$(PROJECT_ID)"
	cd terraform && terraform apply -var="project_id=$(PROJECT_ID)" -auto-approve
	@echo "$(GREEN)✓ Infrastructure deployed$(NC)"

.PHONY: destroy-infrastructure
destroy-infrastructure: check-env ## Destroy GKE infrastructure
	@echo "$(RED)WARNING: This will destroy all infrastructure!$(NC)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	cd terraform && terraform destroy -var="project_id=$(PROJECT_ID)" -auto-approve
	@echo "$(GREEN)✓ Infrastructure destroyed$(NC)"

.PHONY: connect-cluster
connect-cluster: check-env ## Connect kubectl to GKE cluster
	@echo "$(YELLOW)Connecting to GKE cluster...$(NC)"
	gcloud container clusters get-credentials $(CLUSTER_NAME) --region $(REGION) --project $(PROJECT_ID)
	@echo "$(GREEN)✓ Connected to cluster$(NC)"

# Application deployment targets
.PHONY: deploy-all
deploy-all: check-env connect-cluster ## Deploy all ML platform components
	@echo "$(YELLOW)Deploying ML Platform to GKE...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) CLUSTER_NAME=$(CLUSTER_NAME) REGION=$(REGION) ./scripts/deploy-gke-charts.sh
	@echo "$(GREEN)✓ All components deployed$(NC)"

.PHONY: deploy-storage
deploy-storage: check-env connect-cluster ## Deploy shared storage components
	@echo "$(YELLOW)Deploying shared storage...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) ./scripts/deploy-gke-charts.sh storage
	@echo "$(GREEN)✓ Storage deployed$(NC)"

.PHONY: deploy-monitoring
deploy-monitoring: check-env connect-cluster ## Deploy monitoring stack
	@echo "$(YELLOW)Deploying monitoring stack...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) ./scripts/deploy-gke-charts.sh monitoring
	@echo "$(GREEN)✓ Monitoring deployed$(NC)"

.PHONY: deploy-mlflow
deploy-mlflow: check-env connect-cluster ## Deploy MLflow
	@echo "$(YELLOW)Deploying MLflow...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) ./scripts/deploy-gke-charts.sh mlflow
	@echo "$(GREEN)✓ MLflow deployed$(NC)"

.PHONY: deploy-ray
deploy-ray: check-env connect-cluster ## Deploy Ray cluster
	@echo "$(YELLOW)Deploying Ray cluster...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) ./scripts/deploy-gke-charts.sh ray
	@echo "$(GREEN)✓ Ray cluster deployed$(NC)"

.PHONY: deploy-jupyterhub
deploy-jupyterhub: check-env connect-cluster ## Deploy JupyterHub
	@echo "$(YELLOW)Deploying JupyterHub...$(NC)"
	chmod +x scripts/deploy-gke-charts.sh
	PROJECT_ID=$(PROJECT_ID) ./scripts/deploy-gke-charts.sh jupyterhub
	@echo "$(GREEN)✓ JupyterHub deployed$(NC)"

# GitOps targets
.PHONY: deploy-argocd
deploy-argocd: check-env connect-cluster ## Deploy ArgoCD for GitOps
	@echo "$(YELLOW)Deploying ArgoCD...$(NC)"
	kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
	@echo "$(YELLOW)Waiting for ArgoCD to be ready...$(NC)"
	kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
	@echo "$(GREEN)✓ ArgoCD deployed$(NC)"
	@echo "$(YELLOW)ArgoCD admin password:$(NC)"
	@kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo

.PHONY: deploy-gitops-apps
deploy-gitops-apps: check-env ## Deploy applications via ArgoCD (GitOps)
	@echo "$(YELLOW)Deploying applications via GitOps...$(NC)"
	@echo "$(RED)NOTE: Update GitHub repository URL in manifests/gke-applications/*.yaml$(NC)"
	kubectl apply -f manifests/gke-applications/app-of-apps-gke.yaml
	@echo "$(GREEN)✓ GitOps applications configured$(NC)"

# Management targets
.PHONY: status
status: ## Show status of all components
	@echo "$(YELLOW)ML Platform Status$(NC)"
	@echo "=================="
	@echo ""
	@echo "$(YELLOW)Namespaces:$(NC)"
	@kubectl get namespaces | grep -E "(jupyterhub|ray-system|mlflow|monitoring|argocd)" || echo "No ML platform namespaces found"
	@echo ""
	@echo "$(YELLOW)Pods:$(NC)"
	@kubectl get pods -A | grep -E "(jupyterhub|ray|mlflow|prometheus|grafana|argocd)" || echo "No ML platform pods found"
	@echo ""
	@echo "$(YELLOW)Services:$(NC)"
	@kubectl get svc -A | grep -E "(jupyterhub|ray|mlflow|prometheus|grafana|argocd)" || echo "No ML platform services found"
	@echo ""
	@echo "$(YELLOW)Persistent Volumes:$(NC)"
	@kubectl get pv,pvc -A | grep -E "(filestore|prometheus|grafana|mlflow)" || echo "No persistent volumes found"

.PHONY: logs
logs: ## Show logs for all components
	@echo "$(YELLOW)Recent logs from ML Platform components:$(NC)"
	@echo "========================================"
	@for ns in jupyterhub ray-system mlflow monitoring; do \
		echo ""; \
		echo "$(YELLOW)Namespace: $$ns$(NC)"; \
		kubectl logs --tail=10 -l app.kubernetes.io/part-of=ml-platform -n $$ns 2>/dev/null || echo "No logs found for $$ns"; \
	done

.PHONY: port-forward-all
port-forward-all: ## Set up port forwarding for all services
	@echo "$(YELLOW)Setting up port forwarding...$(NC)"
	@echo "$(GREEN)Access URLs:$(NC)"
	@echo "  JupyterHub: http://localhost:8080"
	@echo "  Grafana: http://localhost:3000"
	@echo "  Prometheus: http://localhost:9090"
	@echo "  MLflow: http://localhost:5000"
	@echo "  Ray Dashboard: http://localhost:8265"
	@echo "  ArgoCD: http://localhost:8081"
	@echo ""
	@echo "$(YELLOW)Starting port forwarding (Ctrl+C to stop)...$(NC)"
	@kubectl port-forward svc/proxy-public 8080:80 -n jupyterhub & \
	kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring & \
	kubectl port-forward svc/monitoring-kube-prometheus-prometheus 9090:9090 -n monitoring & \
	kubectl port-forward svc/mlflow 5000:5000 -n mlflow & \
	kubectl port-forward svc/ray-cluster-head 8265:8265 -n ray-system & \
	kubectl port-forward svc/argocd-server 8081:80 -n argocd & \
	wait

# Individual port forwarding targets
.PHONY: port-forward-jupyterhub
port-forward-jupyterhub: ## Port forward JupyterHub
	@echo "$(GREEN)JupyterHub: http://localhost:8080$(NC)"
	kubectl port-forward svc/proxy-public 8080:80 -n jupyterhub

.PHONY: port-forward-grafana
port-forward-grafana: ## Port forward Grafana
	@echo "$(GREEN)Grafana: http://localhost:3000$(NC)"
	kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring

.PHONY: port-forward-mlflow
port-forward-mlflow: ## Port forward MLflow
	@echo "$(GREEN)MLflow: http://localhost:5000$(NC)"
	kubectl port-forward svc/mlflow 5000:5000 -n mlflow

.PHONY: port-forward-ray
port-forward-ray: ## Port forward Ray Dashboard
	@echo "$(GREEN)Ray Dashboard: http://localhost:8265$(NC)"
	kubectl port-forward svc/ray-cluster-head 8265:8265 -n ray-system

.PHONY: port-forward-argocd
port-forward-argocd: ## Port forward ArgoCD
	@echo "$(GREEN)ArgoCD: http://localhost:8081$(NC)"
	kubectl port-forward svc/argocd-server 8081:80 -n argocd

# Cleanup targets
.PHONY: clean-apps
clean-apps: ## Remove all ML platform applications
	@echo "$(RED)Removing ML platform applications...$(NC)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	kubectl delete applications -n argocd -l app.kubernetes.io/part-of=ml-platform || true
	helm uninstall jupyterhub -n jupyterhub || true
	helm uninstall ray-cluster -n ray-system || true
	helm uninstall mlflow -n mlflow || true
	helm uninstall monitoring -n monitoring || true
	@echo "$(GREEN)✓ Applications removed$(NC)"

.PHONY: clean-namespaces
clean-namespaces: ## Remove ML platform namespaces
	@echo "$(RED)Removing ML platform namespaces...$(NC)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	kubectl delete namespace jupyterhub ray-system mlflow monitoring --ignore-not-found=true
	@echo "$(GREEN)✓ Namespaces removed$(NC)"

# Development targets
.PHONY: validate-charts
validate-charts: ## Validate Helm charts
	@echo "$(YELLOW)Validating Helm charts...$(NC)"
	@for chart in gkeCharts/*/; do \
		if [ -f "$$chart/Chart.yaml" ]; then \
			echo "Validating $$chart"; \
			helm lint "$$chart" || exit 1; \
		fi; \
	done
	@echo "$(GREEN)✓ All charts are valid$(NC)"

.PHONY: template-charts
template-charts: ## Generate Kubernetes manifests from Helm charts
	@echo "$(YELLOW)Generating templates...$(NC)"
	@mkdir -p generated-manifests
	@for chart in gkeCharts/*/; do \
		if [ -f "$$chart/Chart.yaml" ]; then \
			chart_name=$$(basename "$$chart"); \
			echo "Templating $$chart_name"; \
			helm template "$$chart_name" "$$chart" --output-dir generated-manifests/; \
		fi; \
	done
	@echo "$(GREEN)✓ Templates generated in generated-manifests/$(NC)"

.PHONY: update-deps
update-deps: ## Update Helm chart dependencies
	@echo "$(YELLOW)Updating Helm dependencies...$(NC)"
	@for chart in gkeCharts/*/; do \
		if [ -f "$$chart/Chart.yaml" ]; then \
			echo "Updating dependencies for $$chart"; \
			helm dependency update "$$chart"; \
		fi; \
	done
	@echo "$(GREEN)✓ Dependencies updated$(NC)"

# Monitoring targets
.PHONY: get-grafana-password
get-grafana-password: ## Get Grafana admin password
	@echo "$(YELLOW)Grafana admin password:$(NC)"
	@kubectl get secret monitoring-grafana -n monitoring -o jsonpath="{.data.admin-password}" | base64 -d && echo

.PHONY: get-argocd-password
get-argocd-password: ## Get ArgoCD admin password
	@echo "$(YELLOW)ArgoCD admin password:$(NC)"
	@kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo

# Quick start target
.PHONY: quickstart
quickstart: check-env deploy-infrastructure deploy-all ## Quick start: deploy infrastructure and all applications
	@echo "$(GREEN)🎉 ML Platform deployment completed!$(NC)"
	@echo ""
	@echo "$(YELLOW)Next steps:$(NC)"
	@echo "1. Run 'make port-forward-all' to access all services"
	@echo "2. Access JupyterHub at http://localhost:8080 (user: any, password: mlplatform)"
	@echo "3. Access Grafana at http://localhost:3000 (admin/admin123)"
	@echo "4. Access MLflow at http://localhost:5000"
	@echo "5. Access Ray Dashboard at http://localhost:8265"
	@echo ""
	@echo "$(YELLOW)For GitOps deployment:$(NC)"
	@echo "1. Update repository URLs in manifests/gke-applications/*.yaml"
	@echo "2. Run 'make deploy-argocd' and 'make deploy-gitops-apps'"
