# Monitoring stack values optimized for Google Kubernetes Engine (GKE)

kube-prometheus-stack:
  # Global configuration
  global:
    imageRegistry: us-central1-docker.pkg.dev/PROJECT_ID/ml-platform-images
  
  # Prometheus configuration
  prometheus:
    prometheusSpec:
      # Storage configuration for GKE
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: standard-rwo
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
      
      # Retention configuration
      retention: 30d
      retentionSize: 45GB
      
      # Resource configuration
      resources:
        requests:
          cpu: 500m
          memory: 2Gi
        limits:
          cpu: 2
          memory: 8Gi
      
      # Node selector for general-purpose nodes
      nodeSelector:
        cloud.google.com/gke-nodepool: general-purpose
      
      # Tolerations for preemptible nodes
      tolerations:
        - key: "cloud.google.com/gke-preemptible"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      
      # Service account with Workload Identity
      serviceAccount:
        create: true
        name: prometheus
        annotations:
          iam.gke.io/gcp-service-account: "PROJECT_ID-monitoring@PROJECT_ID.iam.gserviceaccount.com"
      
      # Additional scrape configs for ML platform
      additionalScrapeConfigs:
        - job_name: 'ray-cluster'
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - ray-system
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
        
        - job_name: 'mlflow'
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - mlflow
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
              action: keep
              regex: mlflow
            - source_labels: [__address__]
              action: replace
              regex: ([^:]+)(?::\d+)?
              replacement: $1:5000
              target_label: __address__
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
      
      # Rule selector for custom alerts
      ruleSelector:
        matchLabels:
          app: kube-prometheus-stack
          release: monitoring
      
      # Service monitor selector
      serviceMonitorSelector:
        matchLabels:
          app: kube-prometheus-stack
          release: monitoring
      
      # Pod monitor selector
      podMonitorSelector:
        matchLabels:
          app: kube-prometheus-stack
          release: monitoring
  
  # Grafana configuration
  grafana:
    # Admin credentials
    adminPassword: "admin123"  # Change in production
    
    # Persistence
    persistence:
      enabled: true
      storageClassName: standard-rwo
      size: 10Gi
    
    # Resources
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    
    # Node selector
    nodeSelector:
      cloud.google.com/gke-nodepool: general-purpose
    
    # Tolerations for preemptible nodes
    tolerations:
      - key: "cloud.google.com/gke-preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
    
    # Service account with Workload Identity
    serviceAccount:
      create: true
      name: grafana
      annotations:
        iam.gke.io/gcp-service-account: "PROJECT_ID-monitoring@PROJECT_ID.iam.gserviceaccount.com"
    
    # Grafana configuration
    grafana.ini:
      server:
        root_url: "http://localhost:3000"
        serve_from_sub_path: true
      auth:
        disable_login_form: false
      auth.anonymous:
        enabled: true
        org_role: Viewer
      security:
        allow_embedding: true
    
    # Data sources
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://monitoring-kube-prometheus-prometheus:9090
            access: proxy
            isDefault: true
    
    # Dashboard providers
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: 'ml-platform'
            orgId: 1
            folder: 'ML Platform'
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/ml-platform
    
    # Custom dashboards
    dashboards:
      ml-platform:
        ray-cluster:
          gnetId: 17400
          revision: 1
          datasource: Prometheus
        jupyterhub:
          gnetId: 3991
          revision: 1
          datasource: Prometheus
        kubernetes-cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        node-exporter:
          gnetId: 1860
          revision: 31
          datasource: Prometheus
    
    # Ingress configuration
    ingress:
      enabled: false
      # For production with HTTPS:
      # enabled: true
      # ingressClassName: gce
      # annotations:
      #   kubernetes.io/ingress.global-static-ip-name: "grafana-ip"
      #   networking.gke.io/managed-certificates: "grafana-ssl-cert"
      #   kubernetes.io/ingress.allow-http: "false"
      # hosts:
      #   - grafana.your-domain.com
      # tls:
      #   - secretName: grafana-tls
      #     hosts:
      #       - grafana.your-domain.com
  
  # Alertmanager configuration
  alertmanager:
    alertmanagerSpec:
      # Storage configuration
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: standard-rwo
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 5Gi
      
      # Resources
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 1Gi
      
      # Node selector
      nodeSelector:
        cloud.google.com/gke-nodepool: general-purpose
      
      # Tolerations for preemptible nodes
      tolerations:
        - key: "cloud.google.com/gke-preemptible"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      
      # Service account
      serviceAccount:
        create: true
        name: alertmanager
        annotations:
          iam.gke.io/gcp-service-account: "PROJECT_ID-monitoring@PROJECT_ID.iam.gserviceaccount.com"
    
    # Alertmanager configuration
    config:
      global:
        smtp_smarthost: 'localhost:587'
        smtp_from: 'alertmanager@your-domain.com'
      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'web.hook'
      receivers:
        - name: 'web.hook'
          webhook_configs:
            - url: 'http://127.0.0.1:5001/'
  
  # Node exporter configuration
  nodeExporter:
    enabled: true
    
    # Resources
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    
    # Tolerations to run on all nodes
    tolerations:
      - operator: Exists
  
  # Kube-state-metrics configuration
  kubeStateMetrics:
    enabled: true
    
    # Resources
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    
    # Node selector
    nodeSelector:
      cloud.google.com/gke-nodepool: general-purpose
    
    # Tolerations for preemptible nodes
    tolerations:
      - key: "cloud.google.com/gke-preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  
  # Prometheus operator configuration
  prometheusOperator:
    # Resources
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    
    # Node selector
    nodeSelector:
      cloud.google.com/gke-nodepool: general-purpose
    
    # Tolerations for preemptible nodes
    tolerations:
      - key: "cloud.google.com/gke-preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
    
    # Service account
    serviceAccount:
      create: true
      name: prometheus-operator
  
  # Default rules
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: false  # Not applicable for GKE
      configReloaders: true
      general: true
      k8s: true
      kubeApiserverAvailability: true
      kubeApiserverBurnrate: true
      kubeApiserverHistogram: true
      kubeApiserverSlos: true
      kubelet: true
      kubeProxy: false  # Not applicable for GKE
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: false  # Not applicable for GKE
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true

# Custom PrometheusRule for ML Platform
customRules:
  enabled: true
  rules:
    - name: ml-platform.rules
      rules:
        - alert: RayClusterDown
          expr: up{job="ray-cluster"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Ray cluster is down"
            description: "Ray cluster has been down for more than 5 minutes."
        
        - alert: MLflowDown
          expr: up{job="mlflow"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "MLflow is down"
            description: "MLflow has been down for more than 5 minutes."
        
        - alert: JupyterHubDown
          expr: up{job="jupyterhub"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "JupyterHub is down"
            description: "JupyterHub has been down for more than 5 minutes."
        
        - alert: HighCPUUsage
          expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "High CPU usage detected"
            description: "CPU usage is above 80% for more than 10 minutes on {{ $labels.instance }}."
        
        - alert: HighMemoryUsage
          expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "High memory usage detected"
            description: "Memory usage is above 85% for more than 10 minutes on {{ $labels.instance }}."
