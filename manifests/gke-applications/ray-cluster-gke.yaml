apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ray-cluster-gke
  namespace: argocd
  labels:
    app.kubernetes.io/name: ray-cluster
    app.kubernetes.io/part-of: ml-platform
    environment: gke
spec:
  project: default
  
  source:
    repoURL: https://github.com/YOUR_USERNAME/microPlat.git  # Update with your repo
    targetRevision: HEAD
    path: gkeCharts/ray-cluster
    helm:
      valueFiles:
        - values.yaml
  
  destination:
    server: https://kubernetes.default.svc
    namespace: ray-system
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  revisionHistoryLimit: 10
  
  # Health checks for Ray cluster
  ignoreDifferences:
    - group: ray.io
      kind: RayCluster
      jsonPointers:
        - /spec/workerGroupSpecs/0/replicas
        - /status
  
  # Custom health checks for Ray
  health:
    - group: ray.io
      kind: RayCluster
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.state == "ready" then
            hs.status = "Healthy"
            hs.message = "Ray cluster is ready"
          elseif obj.status.state == "failed" then
            hs.status = "Degraded"
            hs.message = "Ray cluster failed"
          else
            hs.status = "Progressing"
            hs.message = "Ray cluster is " .. (obj.status.state or "unknown")
          end
        else
          hs.status = "Progressing"
          hs.message = "Waiting for Ray cluster status"
        end
        return hs
