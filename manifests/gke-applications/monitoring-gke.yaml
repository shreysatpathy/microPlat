apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring-gke
  namespace: argocd
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/part-of: ml-platform
    environment: gke
spec:
  project: default
  
  source:
    repoURL: https://github.com/YOUR_USERNAME/microPlat.git  # Update with your repo
    targetRevision: HEAD
    path: gkeCharts/monitoring
    helm:
      valueFiles:
        - values.yaml
  
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - ServerSideApply=true  # Required for CRDs
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 5m
  
  revisionHistoryLimit: 10
  
  # Health checks for monitoring components
  ignoreDifferences:
    - group: apps
      kind: Deployment
      jsonPointers:
        - /spec/replicas
    - group: apps
      kind: StatefulSet
      jsonPointers:
        - /spec/replicas
        - /spec/volumeClaimTemplates/0/spec/resources/requests/storage
    - group: monitoring.coreos.com
      kind: Prometheus
      jsonPointers:
        - /spec/replicas
    - group: ""
      kind: Secret
      jsonPointers:
        - /data
  
  # Custom health checks
  health:
    - group: monitoring.coreos.com
      kind: Prometheus
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Available" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = "Prometheus is available"
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Prometheus is not yet available"
        else
          hs.status = "Progressing"
          hs.message = "Waiting for Prometheus status"
        end
        return hs
    
    - group: monitoring.coreos.com
      kind: Alertmanager
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Available" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = "Alertmanager is available"
                return hs
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Alertmanager is not yet available"
        else
          hs.status = "Progressing"
          hs.message = "Waiting for Alertmanager status"
        end
        return hs
