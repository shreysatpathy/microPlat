---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  namespace: {{ include "kube-prometheus-stack.namespace" . }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  namespace: {{ include "kube-prometheus-stack.namespace" . }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
rules:
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  namespace: {{ include "kube-prometheus-stack.namespace" . }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-10"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
subjects:
- kind: ServiceAccount
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  namespace: {{ include "kube-prometheus-stack.namespace" . }}
roleRef:
  kind: Role
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
  namespace: {{ include "kube-prometheus-stack.namespace" . }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-5"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: {{ include "kube-prometheus-stack.fullname" . }}-pvc-fix
      restartPolicy: OnFailure
      containers:
      - name: pvc-fix
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking for existing Grafana PVC..."
          PVC_NAME="{{ include "kube-prometheus-stack.fullname" . }}-grafana"
          
          if kubectl get pvc "$PVC_NAME" -n {{ include "kube-prometheus-stack.namespace" . }} 2>/dev/null; then
            echo "Found existing PVC: $PVC_NAME"
            
            # Check if PVC is bound
            STATUS=$(kubectl get pvc "$PVC_NAME" -n {{ include "kube-prometheus-stack.namespace" . }} -o jsonpath='{.status.phase}')
            if [ "$STATUS" = "Bound" ]; then
              echo "PVC is bound, adding protection annotation..."
              kubectl annotate pvc "$PVC_NAME" -n {{ include "kube-prometheus-stack.namespace" . }} \
                argocd.argoproj.io/sync-options=Prune=false --overwrite
              
              echo "Removing problematic finalizers if present..."
              kubectl patch pvc "$PVC_NAME" -n {{ include "kube-prometheus-stack.namespace" . }} \
                --type=json -p='[{"op": "remove", "path": "/metadata/finalizers"}]' 2>/dev/null || true
              
              echo "PVC protection applied successfully"
            else
              echo "PVC is not bound (status: $STATUS), no protection needed"
            fi
          else
            echo "No existing Grafana PVC found, nothing to protect"
          fi
          
          echo "PVC fix hook completed successfully"
